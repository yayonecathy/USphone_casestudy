# -*- coding: utf-8 -*-
"""US Smartphone Case Study EDA(Cathy Lee)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GGp1iwKY9p2XEZHyyb4wuB3WKv_y6CBX
"""

#code snippet 0
#setting url
url = 'https://raw.githubusercontent.com/yayonecathy/USphone_casestudy/refs/heads/main/Case%20Study_0422.xlsx%20-%20raw.csv'

#code snippet 1
#importing pandas and reading the data from url
import pandas as pd
df = pd.read_csv(url)

#code snippet 2
#displaying data types of each column
df.dtypes

#Code Snippet 3
#from column 'DeviceSub', filter only SMART, in order to get Smartphone values

# Filter the DataFrame to include only rows where 'DeviceSub' is 'SMART'
df = df[df['DeviceSub'] == 'SMART']

# Display the filtered DataFrame
df

#Code snippet 4
#getting rid of commas in the data
cols_to_convert = ['Revenue(FRP)', 'SellOut', 'FRP']

for col in cols_to_convert:
    df[col] = df[col].astype(str).str.replace(',', '').str.strip()
    df[col] = pd.to_numeric(df[col], errors='coerce')

#code snippet 5
# Creating ASP(Average Sales Pricing) column
df['Average Sales Pricing'] = df['Revenue(FRP)'] / df['SellOut']
df

#code snippet 6
#importing necessary packages to add external (economic indicators, holidays,etc)variables
import pandas_datareader as web
import holidays
from datetime import datetime

#code snippet 7
# Setting the time range
start = '2022-01-01'
end = '2024-12-31'

# Fetching from FRED
fed_rate = web.DataReader('FEDFUNDS', 'fred', start, end)
inflation = web.DataReader('CPIAUCSL', 'fred', start, end)
gdp = web.DataReader('GDP', 'fred', start, end)
unemployment = web.DataReader('UNRATE', 'fred', start, end)

# Resample to Monthly if needed
fed_rate = fed_rate.resample('M').last()
inflation = inflation.resample('M').last()
gdp = gdp.resample('M').last()
unemployment = unemployment.resample('M').last()

#code snippet 8
# Combine all indicators into one DataFrame
econ_df = pd.concat([fed_rate, inflation, gdp, unemployment], axis=1)
econ_df.columns = ['FedRate', 'CPI', 'GDP', 'Unemployment']

# Reset index and convert date to YYYYMM
econ_df = econ_df.reset_index()
econ_df['Month'] = econ_df['DATE'].dt.strftime('%Y%m')
econ_df = econ_df.drop(columns=['DATE'])
econ_df

#code snippet 9
# Convert 'Month' column in both dataframes to the same data type (string)
df['Month'] = df['Month'].astype(str)
econ_df['Month'] = econ_df['Month'].astype(str)

# Merge the two dataframes
df = df.merge(econ_df, on='Month', how='left')
df

#code snippet 10
#importing holidays
import holidays

# Create a list of US holidays from 2022 to 2024
us_holidays = holidays.US(years=[2022, 2023, 2024])

# Convert to DataFrame
holiday_df = pd.DataFrame(list(us_holidays.items()), columns=['date', 'Holiday'])

# Convert 'date' column to pandas Timestamp objects
holiday_df['date'] = pd.to_datetime(holiday_df['date'])

# use the .dt accessor
holiday_df['Month'] = holiday_df['date'].dt.strftime('%Y%m')

#code snippet 11
#showing holiday names in the Month
holiday_flags = holiday_df.groupby('Month')['Holiday'].apply(lambda x: ', '.join(sorted(set(x)))).reset_index()
holiday_flags.columns = ['Month', 'HolidayNames']

#code snippet 12
#Merging the two dataframes
df = df.merge(holiday_flags, on='Month', how='left')

# If no holiday that month,  fill with 'None' or blank
df['HolidayNames'] = df['HolidayNames'].fillna('None')

#code snippet 13
#Add  column 'Number of Holidays' with number of holidays per month in it

# Count holidays per month
holiday_counts = holiday_df.groupby('Month')['Holiday'].count().reset_index()
holiday_counts.columns = ['Month', 'Number of Holidays']

# Merge holiday counts with the main DataFrame
df = df.merge(holiday_counts, on='Month', how='left')

# Fill NaN values in 'Number of Holidays' with 0 (if no holidays in a month)
df['Number of Holidays'] = df['Number of Holidays'].fillna(0)

#code snippet 14
#Checking the merged dataframe
df

#code snippet 15
#exporting the dataframe to csv file
df.to_csv('2025US_Smartphone_casestudy.csv', index=False)

#Code snippet 16
#installing ydata for EDA report
!pip install ydata-profiling

#Code snippet 17
from ydata_profiling import ProfileReport

profile = ProfileReport(df, title="casestudy", explorative=True)
profile.to_file("US_Smartphone_casestudy.html")

